diff --git a/node_modules/@strapi/plugin-users-permissions/admin/src/pages/Providers/index.js b/node_modules/@strapi/plugin-users-permissions/admin/src/pages/Providers/index.js
index db31e84..501cb7a 100644
--- a/node_modules/@strapi/plugin-users-permissions/admin/src/pages/Providers/index.js
+++ b/node_modules/@strapi/plugin-users-permissions/admin/src/pages/Providers/index.js
@@ -108,6 +108,16 @@ export const ProvidersPage = () => {
     return has(providerToEdit, 'subdomain');
   }, [providers, providerToEditName]);
 
+  const isProviderWithBasicHeader = useMemo(() => {
+    if (!providerToEditName) {
+      return false;
+    }
+
+    const providerToEdit = providers.find((obj) => obj.name === providerToEditName);
+
+    return has(providerToEdit, 'basicHeader');
+  }, [providers, providerToEditName]);
+
   const pageTitle = formatMessage({
     id: getTrad('HeaderNav.link.providers'),
     defaultMessage: 'Providers',
@@ -122,8 +132,12 @@ export const ProvidersPage = () => {
       return forms.providersWithSubdomain;
     }
 
+    if (isProviderWithBasicHeader) {
+      return forms.providersWithBasicHeader;
+    }
+
     return forms.providers;
-  }, [providerToEditName, isProviderWithSubdomain]);
+  }, [providerToEditName, isProviderWithSubdomain, isProviderWithBasicHeader]);
 
   const handleToggleModal = () => {
     setIsOpen((prev) => !prev);
diff --git a/node_modules/@strapi/plugin-users-permissions/admin/src/pages/Providers/utils/createProvidersArray.js b/node_modules/@strapi/plugin-users-permissions/admin/src/pages/Providers/utils/createProvidersArray.js
index 547e82d..7c2dbc4 100644
--- a/node_modules/@strapi/plugin-users-permissions/admin/src/pages/Providers/utils/createProvidersArray.js
+++ b/node_modules/@strapi/plugin-users-permissions/admin/src/pages/Providers/utils/createProvidersArray.js
@@ -3,11 +3,13 @@ import { sortBy } from 'lodash';
 const createProvidersArray = (data) => {
   return sortBy(
     Object.keys(data).reduce((acc, current) => {
-      const { icon: iconName, enabled, subdomain } = data[current];
+      const { icon: iconName, enabled, subdomain, basicHeader, openPlanetSecret } = data[current];
       const icon = iconName === 'envelope' ? ['fas', 'envelope'] : ['fab', iconName];
 
       if (subdomain !== undefined) {
         acc.push({ name: current, icon, enabled, subdomain });
+      } else if (basicHeader !== undefined) {
+        acc.push({ name: current, icon, enabled, basicHeader, openPlanetSecret });
       } else {
         acc.push({ name: current, icon, enabled });
       }
diff --git a/node_modules/@strapi/plugin-users-permissions/admin/src/pages/Providers/utils/forms.js b/node_modules/@strapi/plugin-users-permissions/admin/src/pages/Providers/utils/forms.js
index 71fe4c5..f5713b3 100644
--- a/node_modules/@strapi/plugin-users-permissions/admin/src/pages/Providers/utils/forms.js
+++ b/node_modules/@strapi/plugin-users-permissions/admin/src/pages/Providers/utils/forms.js
@@ -254,6 +254,132 @@ const forms = {
       }),
     }),
   },
+  providersWithBasicHeader: {
+    form: [
+      [
+        {
+          intlLabel: enabledLabel,
+          name: 'enabled',
+          type: 'bool',
+          description: enabledDescription,
+          size: 6,
+          validations: {
+            required: true,
+          },
+        },
+      ],
+      [
+        {
+          intlLabel: keyLabel,
+          name: 'key',
+          type: 'text',
+          placeholder: textPlaceholder,
+          size: 12,
+          validations: {
+            required: true,
+          },
+        },
+      ],
+      [
+        {
+          intlLabel: secretLabel,
+          name: 'secret',
+          type: 'text',
+          placeholder: textPlaceholder,
+          size: 12,
+          validations: {
+            required: true,
+          },
+        },
+      ],
+      [
+        {
+          intlLabel: {
+            id: 'PopUpForm.Providers.basicHeader.label',
+            defaultMessage: 'Basic Header',
+          },
+          name: 'basicHeader',
+          type: 'text',
+          placeholder: {
+            id: 'PopUpForm.Providers.basicHeader.placeholder',
+            defaultMessage: 'Basic base64Encode(login:password)',
+          },
+          size: 12,
+          validations: {
+            required: false,
+          },
+        },
+      ],
+      [
+        {
+          intlLabel: {
+            id: 'PopUpForm.Providers.openPlanetSecret.label',
+            defaultMessage: 'Open Planet Secret',
+          },
+          name: 'openPlanetSecret',
+          type: 'text',
+          placeholder: {
+            id: 'PopUpForm.Providers.openPlanetSecret.placeholder',
+            defaultMessage: 'your/PluginSecret',
+          },
+          size: 12,
+          validations: {
+            required: false,
+          },
+        },
+      ],
+      [
+        {
+          intlLabel: callbackLabel,
+          placeholder: callbackPlaceholder,
+          name: 'callback',
+          type: 'text',
+          size: 12,
+          validations: {
+            required: true,
+          },
+        },
+      ],
+      [
+        {
+          intlLabel: hintLabel,
+          name: 'noName',
+          type: 'text',
+          validations: {},
+          size: 12,
+          disabled: true,
+        },
+      ],
+    ],
+    schema: yup.object().shape({
+      enabled: yup.bool().required(translatedErrors.required),
+      key: yup.string().when('enabled', {
+        is: true,
+        then: yup.string().required(translatedErrors.required),
+        otherwise: yup.string(),
+      }),
+      secret: yup.string().when('enabled', {
+        is: true,
+        then: yup.string().required(translatedErrors.required),
+        otherwise: yup.string(),
+      }),
+      basicHeader: yup.string().when('enabled', {
+        is: true,
+        then: yup.string().required(translatedErrors.required),
+        otherwise: yup.string(),
+      }),
+      openPlanetSecret: yup.string().when('enabled', {
+        is: true,
+        then: yup.string().required(translatedErrors.required),
+        otherwise: yup.string(),
+      }),
+      callback: yup.string().when('enabled', {
+        is: true,
+        then: yup.string().required(translatedErrors.required),
+        otherwise: yup.string(),
+      }),
+    }),
+  },
 };
 
 export default forms;
diff --git a/node_modules/@strapi/plugin-users-permissions/server/bootstrap/grant-config.js b/node_modules/@strapi/plugin-users-permissions/server/bootstrap/grant-config.js
index 31c612c..45d93c5 100644
--- a/node_modules/@strapi/plugin-users-permissions/server/bootstrap/grant-config.js
+++ b/node_modules/@strapi/plugin-users-permissions/server/bootstrap/grant-config.js
@@ -128,4 +128,14 @@ module.exports = (baseURL) => ({
     callback: `${baseURL}/patreon/callback`,
     scope: ['identity', 'identity[email]'],
   },
+  trackmania: {
+    enabled: true,
+    icon: 'trackmania',
+    key: '',
+    secret: '',
+    basicHeader: '',
+    openPlanetSecret: '',
+    callback: `${baseURL}/trackmania/callback`,
+    scope:[]
+  },
 });
diff --git a/node_modules/@strapi/plugin-users-permissions/server/services/providers-registry.js b/node_modules/@strapi/plugin-users-permissions/server/services/providers-registry.js
index 6743f57..21f1f47 100644
--- a/node_modules/@strapi/plugin-users-permissions/server/services/providers-registry.js
+++ b/node_modules/@strapi/plugin-users-permissions/server/services/providers-registry.js
@@ -331,6 +331,17 @@ const getInitialProviders = ({ purest }) => ({
         };
       });
   },
+  async trackmania({ accessToken }) {
+    const trackmania = purest({ provider: 'trackmania' });
+
+    const { body: userBody } = await trackmania.get('user').auth(accessToken).request();
+
+    return {
+      username: userBody.displayName,
+      email: userBody.displayName + '@grinding-stats.openplanet.dev',
+      tmId: userBody.accountId,
+    };
+  },
 });
 
 module.exports = () => {
diff --git a/node_modules/@strapi/plugin-users-permissions/server/services/providers.js b/node_modules/@strapi/plugin-users-permissions/server/services/providers.js
index 1907f88..b23da1e 100644
--- a/node_modules/@strapi/plugin-users-permissions/server/services/providers.js
+++ b/node_modules/@strapi/plugin-users-permissions/server/services/providers.js
@@ -60,9 +60,17 @@ module.exports = ({ strapi }) => {
       throw new Error('Email was not available.');
     }
 
-    const users = await strapi.query('plugin::users-permissions.user').findMany({
-      where: { email },
-    });
+    let users
+    if (provider === 'trackmania') {
+      users = await strapi.query('plugin::users-permissions.user').findMany({
+        where: { tmId: profile.tmId },
+      });
+    }
+    else {
+      users = await strapi.query('plugin::users-permissions.user').findMany({
+        where: { email },
+      });
+    }
 
     const advancedSettings = await strapi
       .store({ type: 'plugin', name: 'users-permissions', key: 'advanced' })
@@ -75,6 +83,24 @@ module.exports = ({ strapi }) => {
     }
 
     if (!_.isEmpty(user)) {
+      if (provider === 'trackmania') {
+        // Retrieve default role.
+        const defaultRole = await strapi
+          .query('plugin::users-permissions.role')
+          .findOne({ where: { type: advancedSettings.default_role } });
+
+        const updateUser = {
+          ...profile,
+          email, // overwrite with lowercased email
+          provider,
+          role: defaultRole.id,
+          confirmed: true,
+        };
+
+        const updatedUser = await strapi.entityService.update('plugin::users-permissions.user', user.id, { data: updateUser });
+
+        return updatedUser;
+      }
       return user;
     }
 
